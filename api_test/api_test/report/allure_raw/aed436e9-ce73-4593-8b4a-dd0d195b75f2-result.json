{"name": "test_in_theaters[验证响应中天气与预期一致]", "status": "failed", "statusDetails": {"message": "AssertionError: assert ['查询的区域编码无效'] == '查询的区域编码无效'\n +  where ['查询的区域编码无效'] = <function jsonpath at 0x0000017085628A60>({'message': '查询的区域编码无效', 'status': 40}, '$.message')\n +    where <function jsonpath at 0x0000017085628A60> = jsonpath.jsonpath", "trace": "self = <case.login_box.test_getAir.TestInTheaters object at 0x0000017085651EF0>, preparation = '在数据库中准备测试数据', env = {'host': {'air': 'http://api.map.baidu.com', 'local': 'test'}}, case = '验证响应中天气与预期一致'\nhttp = {'headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87...params': {'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG', 'data_type': 'all', 'district_id': 222411}, 'path': '/weather/v1/'}\nexpected = {'response': {'message': '查询的区域编码无效', 'status': 41}}\n\n    @pytest.mark.parametrize(\"case,http,expected\",list(list_params),ids= cases)\n    def test_in_theaters(self,preparation,env,case,http,expected):#实现测试数据与用例代码逻辑分离\n        '''[\n                ('验证响应中status和message与预期一致',\n                    {\n                    'method': 'GET',\n                     'path': '/weather/v1/',\n                    'headers': {\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                     'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                ),\n                 ('你好',\n                    {\n                    'method': 'POST',\n                    'path': '/weather/v1/',\n                    'headers':{\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                    'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                     )\n                ]'''\n        # host = \"http://api.map.baidu.com\"\n        #[0][1]中0表示是第一条用例（列表中的第一个小元祖），1表示小元祖其中的字典“http”键的值--请求内容\n        # ps:小元祖中的内容分为三块，第一部分为用例标题，为字符串的形式；第二块是http的请求主体内容；第三块是预期结果的内容；后面两块都是以字典数据类型存储表达\n        #所以基本的形式有[i][0],[i][1],[i][2],i为用例的条数\n        # r = requests.request(list_params[0][1][\"method\"],\n        #                      url=host + list_params[0][1][\"path\"],\n        #                      headers=list_params[0][1][\"headers\"],\n        #                      params=list_params[0][1][\"params\"])\n    \n        r = requests.request(http[\"method\"],\n                             url=env[\"host\"][\"air\"] + http[\"path\"],\n                             headers=http[\"headers\"],\n                             params=http[\"params\"]\n                             )\n        response = r.json()\n        print(response)\n        # assert response[\"status\"] == 0\n        # assert response[\"status\"] == list_params[0][2]['response']['status']\n        #以下是经过参数化改良后的断言内容表达式\n        # assert response[\"status\"] == expected['response']['status']\n        # assert response['message'] == expected['response']['message']\n        #以下是采用jsonpath的方式来提取断言表达\n>       assert jsonpath.jsonpath(response,\"$.message\") == expected['response']['message']\nE       AssertionError: assert ['查询的区域编码无效'] == '查询的区域编码无效'\nE        +  where ['查询的区域编码无效'] = <function jsonpath at 0x0000017085628A60>({'message': '查询的区域编码无效', 'status': 40}, '$.message')\nE        +    where <function jsonpath at 0x0000017085628A60> = jsonpath.jsonpath\n\ncase\\login_box\\test_getAir.py:86: AssertionError"}, "description": "[\n                ('验证响应中status和message与预期一致',\n                    {\n                    'method': 'GET',\n                     'path': '/weather/v1/',\n                    'headers': {\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                     'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                ),\n                 ('你好',\n                    {\n                    'method': 'POST',\n                    'path': '/weather/v1/',\n                    'headers':{\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                    'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                     )\n                ]", "attachments": [{"name": "stdout", "source": "9c49490f-5ab6-456a-9a6d-4144fe450758-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "'验证响应中天气与预期一致'"}, {"name": "http", "value": "{'method': 'GET', 'path': '/weather/v1/', 'headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'}, 'params': {'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG', 'district_id': 222411, 'data_type': 'all'}}"}, {"name": "expected", "value": "{'response': {'status': 41, 'message': '查询的区域编码无效'}}"}], "start": 1610594034814, "stop": 1610594034925, "uuid": "02e6b69d-fda4-4b3a-89bd-890e0b35bca2", "historyId": "081a725199de5e80d41646906ffb7fd3", "testCaseId": "ba503dd8b9b0b7d32e2430901f82f6be", "fullName": "case.login_box.test_getAir.TestInTheaters#test_in_theaters", "labels": [{"name": "parentSuite", "value": "case.login_box"}, {"name": "suite", "value": "test_getAir"}, {"name": "subSuite", "value": "TestInTheaters"}, {"name": "host", "value": "DESKTOP-BSEPO77"}, {"name": "thread", "value": "124912-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.login_box.test_getAir"}]}