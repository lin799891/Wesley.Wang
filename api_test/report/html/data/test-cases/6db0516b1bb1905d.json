{
  "uid" : "6db0516b1bb1905d",
  "name" : "test_in_theaters[验证响应中status和message与预期一致]",
  "fullName" : "case.login_box.test_getAir.TestInTheaters#test_in_theaters",
  "historyId" : "b60d1faa93d19944888af9c1663b9927",
  "time" : {
    "start" : 1610594034374,
    "stop" : 1610594034702,
    "duration" : 328
  },
  "description" : "[\n                ('验证响应中status和message与预期一致',\n                    {\n                    'method': 'GET',\n                     'path': '/weather/v1/',\n                    'headers': {\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                     'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                ),\n                 ('你好',\n                    {\n                    'method': 'POST',\n                    'path': '/weather/v1/',\n                    'headers':{\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                    'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                     )\n                ]",
  "descriptionHtml" : "<p>[\n('验证响应中status和message与预期一致',\n{\n'method': 'GET',\n'path': '/weather/v1/',\n'headers': {\n'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n},\n'params': {\n'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n'district_id': 222405,\n'data_type': 'all'\n}\n},\n{\n'status': 0,\n'message': 'success'\n}\n),\n('你好',\n{\n'method': 'POST',\n'path': '/weather/v1/',\n'headers':{\n'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n},\n'params': {\n'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n'district_id': 222405,\n'data_type': 'all'\n}\n},\n{\n'status': 0,\n'message': 'success'\n}\n)\n]</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert ['success'] == 'success!'\n +  where ['success'] = <function jsonpath at 0x0000017085628A60>({'message': 'success', 'result': {'forecasts': [{'date': '2021-01-14', 'high': -6, 'low': -15, 'text_day': '多云', ...},... 'id': '222405', 'name': '龙井', ...}, 'now': {'feels_like': -18, 'rh': 46, 'temp': -13, 'text': '晴', ...}}, 'status': 0}, '$.message')\n +    where <function jsonpath at 0x0000017085628A60> = jsonpath.jsonpath",
  "statusTrace" : "self = <case.login_box.test_getAir.TestInTheaters object at 0x00000170856519B0>, preparation = '在数据库中准备测试数据', env = {'host': {'air': 'http://api.map.baidu.com', 'local': 'test'}}, case = '验证响应中status和message与预期一致'\nhttp = {'headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87...params': {'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG', 'data_type': 'all', 'district_id': 222405}, 'path': '/weather/v1/'}\nexpected = {'response': {'message': 'success!', 'status': 0, 'text': '阴'}}\n\n    @pytest.mark.parametrize(\"case,http,expected\",list(list_params),ids= cases)\n    def test_in_theaters(self,preparation,env,case,http,expected):#实现测试数据与用例代码逻辑分离\n        '''[\n                ('验证响应中status和message与预期一致',\n                    {\n                    'method': 'GET',\n                     'path': '/weather/v1/',\n                    'headers': {\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                     'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                ),\n                 ('你好',\n                    {\n                    'method': 'POST',\n                    'path': '/weather/v1/',\n                    'headers':{\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                    'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                     )\n                ]'''\n        # host = \"http://api.map.baidu.com\"\n        #[0][1]中0表示是第一条用例（列表中的第一个小元祖），1表示小元祖其中的字典“http”键的值--请求内容\n        # ps:小元祖中的内容分为三块，第一部分为用例标题，为字符串的形式；第二块是http的请求主体内容；第三块是预期结果的内容；后面两块都是以字典数据类型存储表达\n        #所以基本的形式有[i][0],[i][1],[i][2],i为用例的条数\n        # r = requests.request(list_params[0][1][\"method\"],\n        #                      url=host + list_params[0][1][\"path\"],\n        #                      headers=list_params[0][1][\"headers\"],\n        #                      params=list_params[0][1][\"params\"])\n    \n        r = requests.request(http[\"method\"],\n                             url=env[\"host\"][\"air\"] + http[\"path\"],\n                             headers=http[\"headers\"],\n                             params=http[\"params\"]\n                             )\n        response = r.json()\n        print(response)\n        # assert response[\"status\"] == 0\n        # assert response[\"status\"] == list_params[0][2]['response']['status']\n        #以下是经过参数化改良后的断言内容表达式\n        # assert response[\"status\"] == expected['response']['status']\n        # assert response['message'] == expected['response']['message']\n        #以下是采用jsonpath的方式来提取断言表达\n>       assert jsonpath.jsonpath(response,\"$.message\") == expected['response']['message']\nE       AssertionError: assert ['success'] == 'success!'\nE        +  where ['success'] = <function jsonpath at 0x0000017085628A60>({'message': 'success', 'result': {'forecasts': [{'date': '2021-01-14', 'high': -6, 'low': -15, 'text_day': '多云', ...},... 'id': '222405', 'name': '龙井', ...}, 'now': {'feels_like': -18, 'rh': 46, 'temp': -13, 'text': '晴', ...}}, 'status': 0}, '$.message')\nE        +    where <function jsonpath at 0x0000017085628A60> = jsonpath.jsonpath\n\ncase\\login_box\\test_getAir.py:86: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "env",
    "time" : {
      "start" : 1610594034369,
      "stop" : 1610594034371,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "preparation",
    "time" : {
      "start" : 1610594034371,
      "stop" : 1610594034372,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "[\n                ('验证响应中status和message与预期一致',\n                    {\n                    'method': 'GET',\n                     'path': '/weather/v1/',\n                    'headers': {\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                     'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                ),\n                 ('你好',\n                    {\n                    'method': 'POST',\n                    'path': '/weather/v1/',\n                    'headers':{\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                    'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                     )\n                ]",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert ['success'] == 'success!'\n +  where ['success'] = <function jsonpath at 0x0000017085628A60>({'message': 'success', 'result': {'forecasts': [{'date': '2021-01-14', 'high': -6, 'low': -15, 'text_day': '多云', ...},... 'id': '222405', 'name': '龙井', ...}, 'now': {'feels_like': -18, 'rh': 46, 'temp': -13, 'text': '晴', ...}}, 'status': 0}, '$.message')\n +    where <function jsonpath at 0x0000017085628A60> = jsonpath.jsonpath",
    "statusTrace" : "self = <case.login_box.test_getAir.TestInTheaters object at 0x00000170856519B0>, preparation = '在数据库中准备测试数据', env = {'host': {'air': 'http://api.map.baidu.com', 'local': 'test'}}, case = '验证响应中status和message与预期一致'\nhttp = {'headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87...params': {'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG', 'data_type': 'all', 'district_id': 222405}, 'path': '/weather/v1/'}\nexpected = {'response': {'message': 'success!', 'status': 0, 'text': '阴'}}\n\n    @pytest.mark.parametrize(\"case,http,expected\",list(list_params),ids= cases)\n    def test_in_theaters(self,preparation,env,case,http,expected):#实现测试数据与用例代码逻辑分离\n        '''[\n                ('验证响应中status和message与预期一致',\n                    {\n                    'method': 'GET',\n                     'path': '/weather/v1/',\n                    'headers': {\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                     'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                ),\n                 ('你好',\n                    {\n                    'method': 'POST',\n                    'path': '/weather/v1/',\n                    'headers':{\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n                                },\n                    'params': {\n                                'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG',\n                                'district_id': 222405,\n                                'data_type': 'all'\n                                }\n                    },\n                    {\n                    'status': 0,\n                    'message': 'success'\n                        }\n                     )\n                ]'''\n        # host = \"http://api.map.baidu.com\"\n        #[0][1]中0表示是第一条用例（列表中的第一个小元祖），1表示小元祖其中的字典“http”键的值--请求内容\n        # ps:小元祖中的内容分为三块，第一部分为用例标题，为字符串的形式；第二块是http的请求主体内容；第三块是预期结果的内容；后面两块都是以字典数据类型存储表达\n        #所以基本的形式有[i][0],[i][1],[i][2],i为用例的条数\n        # r = requests.request(list_params[0][1][\"method\"],\n        #                      url=host + list_params[0][1][\"path\"],\n        #                      headers=list_params[0][1][\"headers\"],\n        #                      params=list_params[0][1][\"params\"])\n    \n        r = requests.request(http[\"method\"],\n                             url=env[\"host\"][\"air\"] + http[\"path\"],\n                             headers=http[\"headers\"],\n                             params=http[\"params\"]\n                             )\n        response = r.json()\n        print(response)\n        # assert response[\"status\"] == 0\n        # assert response[\"status\"] == list_params[0][2]['response']['status']\n        #以下是经过参数化改良后的断言内容表达式\n        # assert response[\"status\"] == expected['response']['status']\n        # assert response['message'] == expected['response']['message']\n        #以下是采用jsonpath的方式来提取断言表达\n>       assert jsonpath.jsonpath(response,\"$.message\") == expected['response']['message']\nE       AssertionError: assert ['success'] == 'success!'\nE        +  where ['success'] = <function jsonpath at 0x0000017085628A60>({'message': 'success', 'result': {'forecasts': [{'date': '2021-01-14', 'high': -6, 'low': -15, 'text_day': '多云', ...},... 'id': '222405', 'name': '龙井', ...}, 'now': {'feels_like': -18, 'rh': 46, 'temp': -13, 'text': '晴', ...}}, 'status': 0}, '$.message')\nE        +    where <function jsonpath at 0x0000017085628A60> = jsonpath.jsonpath\n\ncase\\login_box\\test_getAir.py:86: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "dee4621c34859c76",
      "name" : "stdout",
      "source" : "dee4621c34859c76.txt",
      "type" : "text/plain",
      "size" : 1439
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "preparation::0",
    "time" : {
      "start" : 1610594034802,
      "stop" : 1610594034803,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "case.login_box"
  }, {
    "name" : "suite",
    "value" : "test_getAir"
  }, {
    "name" : "subSuite",
    "value" : "TestInTheaters"
  }, {
    "name" : "host",
    "value" : "DESKTOP-BSEPO77"
  }, {
    "name" : "thread",
    "value" : "124912-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.login_box.test_getAir"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "'验证响应中status和message与预期一致'"
  }, {
    "name" : "expected",
    "value" : "{'response': {'status': 0, 'message': 'success!', 'text': '阴'}}"
  }, {
    "name" : "http",
    "value" : "{'method': 'GET', 'path': '/weather/v1/', 'headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'}, 'params': {'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG', 'district_id': 222405, 'data_type': 'all'}}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "6db0516b1bb1905d.json",
  "parameterValues" : [ "'验证响应中status和message与预期一致'", "{'response': {'status': 0, 'message': 'success!', 'text': '阴'}}", "{'method': 'GET', 'path': '/weather/v1/', 'headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'}, 'params': {'ak': 'SKEu06VYg5GH6VA7zERlpM33acLOKNBG', 'district_id': 222405, 'data_type': 'all'}}" ]
}